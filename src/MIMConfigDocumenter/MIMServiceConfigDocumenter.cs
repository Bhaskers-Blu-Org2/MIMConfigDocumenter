//------------------------------------------------------------------------------------------------------------------------------------------
// <copyright file="MIMServiceConfigDocumenter.cs" company="Microsoft">
//      Copyright (c) Microsoft. All Rights Reserved.
//      Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
// </copyright>
// <summary>
// MIM Configuration Documenter Utility
// </summary>
//------------------------------------------------------------------------------------------------------------------------------------------

namespace MIMConfigDocumenter
{
    using System;
    using System.Data;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Web.UI;
    using System.Xml.Linq;
    using System.Xml.XPath;

    /// <summary>
    /// The MIMServiceConfigDocumenter documents the configuration of an MIM Service deployment.
    /// </summary>
    public class MIMServiceConfigDocumenter : ServiceCommonDocumenter
    {
        /// <summary>
        /// The current pilot / test configuration directory.
        /// This is the revised / target configuration which has introduced new changes to the baseline / production environment. 
        /// </summary>
        private string pilotConfigDirectory;

        /// <summary>
        /// The current production configuration directory.
        /// The is the baseline / reference configuration on which the changes will be reported.
        /// </summary>
        private string productionConfigDirectory;

        /// <summary>
        /// The changes configuration directory.
        /// The is the changes configuration generated by SyncChanges.ps1.
        /// </summary>
        private string changesConfigDirectory;

        /// <summary>
        /// The relative path of the current pilot / test configuration directory.
        /// </summary>
        private string pilotConfigRelativePath;

        /// <summary>
        /// The relative path of the current production configuration directory.
        /// </summary>
        private string productionConfigRelativePath;

        /// <summary>
        /// The configuration report file path
        /// </summary>
        private string configReportFilePath;

        /// <summary>
        /// Initializes a new instance of the <see cref="MIMServiceConfigDocumenter"/> class.
        /// </summary>
        /// <param name="targetSystem">The target / pilot / test system.</param>
        /// <param name="referenceSystem">The reference / baseline / production system.</param>
        public MIMServiceConfigDocumenter(string targetSystem, string referenceSystem)
        {
            Logger.Instance.WriteMethodEntry("TargetSystem: '{0}'. ReferenceSystem: '{1}'.", targetSystem, referenceSystem);

            try
            {
                this.pilotConfigRelativePath = targetSystem;
                this.productionConfigRelativePath = referenceSystem;
                this.ReportFileName = Documenter.GetTempFilePath("Report.tmp.html");
                this.ReportToCFileName = Documenter.GetTempFilePath("Report.TOC.tmp.html");

                var rootDirectory = Directory.GetCurrentDirectory().TrimEnd('\\');

                this.pilotConfigDirectory = string.Format(CultureInfo.InvariantCulture, @"{0}\Data\{1}", rootDirectory, this.pilotConfigRelativePath);
                this.productionConfigDirectory = string.Format(CultureInfo.InvariantCulture, @"{0}\Data\{1}", rootDirectory, this.productionConfigRelativePath);
                this.changesConfigDirectory = string.Format(CultureInfo.InvariantCulture, @"{0}\Data\{1}", rootDirectory, "Changes");
                this.configReportFilePath = Documenter.ReportFolder + @"\" + Documenter.GetReportFileBaseName(this.pilotConfigRelativePath, this.productionConfigRelativePath) + "_Service_report.html";

                this.ValidateInput();
                this.MergeServiceExports();
            }
            finally
            {
                Logger.Instance.WriteMethodExit("TargetSystem: '{0}'. ReferenceSystem: '{1}'.", targetSystem, referenceSystem);
            }
        }

        /// <summary>
        /// Generates the report.
        /// </summary>
        public void GenerateReport()
        {
            Logger.Instance.WriteMethodEntry();

            try
            {
                var report = this.GetReport();
                this.WriteReport("FIM/MIM Service Configuration", report.Item1, report.Item2, this.pilotConfigRelativePath, this.productionConfigRelativePath, this.configReportFilePath);
            }
            finally
            {
                Logger.Instance.WriteMethodExit();
            }
        }

        /// <summary>
        /// Gets the MIM Service configuration report.
        /// </summary>
        /// <returns>
        /// The Tuple of configuration report and associated TOC
        /// </returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Reviewed. XhtmlTextWriter takes care of disposting StreamWriter.")]
        public override Tuple<string, string> GetReport()
        {
            Logger.Instance.WriteMethodEntry();

            Tuple<string, string> report;

            try
            {
                this.ReportWriter = new XhtmlTextWriter(new StreamWriter(this.ReportFileName));
                this.ReportToCWriter = new XhtmlTextWriter(new StreamWriter(this.ReportToCFileName));

                var sectionTitle = "FIM/MIM Service Configuration";
                this.WriteSectionHeader(sectionTitle, 1);

                this.ProcessServiceSchemaConfiguration();
                this.ProcessServicePolicyConfiguration();
            }
            catch (Exception e)
            {
                throw Logger.Instance.ReportError(e);
            }
            finally
            {
                report = this.GetReportTuple();

                Logger.Instance.WriteMethodExit();
            }

            return report;
        }

        /// <summary>
        /// Validates the input.
        /// </summary>
        private void ValidateInput()
        {
            Logger.Instance.WriteMethodEntry("TargetSystem: '{0}'. ReferenceSystem: '{1}'.", this.pilotConfigRelativePath, this.productionConfigRelativePath);

            try
            {
                if (!Directory.Exists(this.pilotConfigDirectory))
                {
                    var error = string.Format(CultureInfo.CurrentUICulture, DocumenterResources.PilotConfigurationDirectoryNotFound, this.pilotConfigDirectory);
                    throw Logger.Instance.ReportError(new FileNotFoundException(error));
                }
                else if (!Directory.Exists(this.pilotConfigDirectory + @"\" + "ServiceConfig"))
                {
                    var error = string.Format(CultureInfo.CurrentUICulture, DocumenterResources.ServiceConfigurationDirectoryNotFound, this.pilotConfigDirectory);
                    throw Logger.Instance.ReportError(new FileNotFoundException(error));
                }

                if (!Directory.Exists(this.productionConfigDirectory))
                {
                    var error = string.Format(CultureInfo.CurrentUICulture, DocumenterResources.ProductionConfigurationDirectoryNotFound, this.productionConfigDirectory);
                    throw Logger.Instance.ReportError(new FileNotFoundException(error));
                }
                else if (!Directory.Exists(this.productionConfigDirectory + @"\" + "ServiceConfig"))
                {
                    var error = string.Format(CultureInfo.CurrentUICulture, DocumenterResources.ServiceConfigurationDirectoryNotFound, this.productionConfigDirectory);
                    throw Logger.Instance.ReportError(new FileNotFoundException(error));
                }

                if (!Directory.Exists(this.changesConfigDirectory))
                {
                    var error = string.Format(CultureInfo.CurrentUICulture, DocumenterResources.ChangesConfigurationDirectoryNotFound, this.changesConfigDirectory);
                    throw Logger.Instance.ReportError(new FileNotFoundException(error));
                }
            }
            finally
            {
                Logger.Instance.WriteMethodExit("TargetSystem: '{0}'. ReferenceSystem: '{1}'.", this.pilotConfigRelativePath, this.productionConfigRelativePath);
            }
        }

        /// <summary>
        /// Merges the ADSync configuration export XML files into a single XML file.
        /// </summary>
        private void MergeServiceExports()
        {
            Logger.Instance.WriteMethodEntry();

            try
            {
                this.PilotXml = this.MergeServiceConfigurationExports(true);
                this.ProductionXml = this.MergeServiceConfigurationExports(false);
                this.ChangesXml = this.MergeServiceConfigurationExports(null);
            }
            finally
            {
                Logger.Instance.WriteMethodExit();
            }
        }

        /// <summary>
        /// Merges the Sync configuration exports.
        /// </summary>
        /// <param name="pilotConfig">if set to <c>true</c>, indicates that this is a pilot configuration. Otherwise, this is a production configuration.</param>
        /// <returns>
        /// An <see cref="XElement" /> object representing the combined configuration XML object.
        /// </returns>
        [SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", MessageId = "System.Xml.Linq.XElement.Parse(System.String)", Justification = "Template XML is not localizable.")]
        private XElement MergeServiceConfigurationExports(bool? pilotConfig)
        {
            Logger.Instance.WriteMethodEntry("Pilot Config: '{0}'.", pilotConfig);

            try
            {
                var configDirectory = pilotConfig == null ? this.changesConfigDirectory : (bool)pilotConfig ? this.pilotConfigDirectory : this.productionConfigDirectory;
                var elementName = pilotConfig == null ? "Changes" : (bool)pilotConfig ? "Pilot" : "Production";
                var templateXml = string.Format(CultureInfo.InvariantCulture, "<Root><ServiceConfig><{0}/></ServiceConfig></Root>", elementName);
                var configXml = XElement.Parse(templateXml);

                var config = configXml.XPathSelectElement("*//" + elementName);

                var searchPatern = pilotConfig == null ? Documenter.GetReportFileBaseName(this.pilotConfigRelativePath, this.productionConfigRelativePath) + "_changes_??????.xml" : "*.xml";
                foreach (var file in Directory.EnumerateFiles(configDirectory + "/ServiceConfig", searchPatern))
                {
                    config.Add(XElement.Load(file));
                }

                return configXml;
            }
            finally
            {
                Logger.Instance.WriteMethodEntry("Pilot Config: '{0}'.", pilotConfig);
            }
        }

        /// <summary>
        /// Processes the service schema configuration.
        /// </summary>
        private void ProcessServiceSchemaConfiguration()
        {
            Logger.Instance.WriteMethodEntry();

            try
            {
                var schemaDocumenter = new MIMServiceSchemaDocumenter(this.PilotXml, this.ProductionXml, this.ChangesXml);
                var schemaReport = schemaDocumenter.GetReport();

                this.ReportWriter.Write(schemaReport.Item1);
                this.ReportToCWriter.Write(schemaReport.Item2);
            }
            finally
            {
                Logger.Instance.WriteMethodExit();
            }
        }

        /// <summary>
        /// Processes the service policy configuration.
        /// </summary>
        private void ProcessServicePolicyConfiguration()
        {
            Logger.Instance.WriteMethodEntry();

            try
            {
                var policyDocumenter = new MIMServicePolicyDocumenter(this.PilotXml, this.ProductionXml, this.ChangesXml);
                var policyReport = policyDocumenter.GetReport();

                this.ReportWriter.Write(policyReport.Item1);
                this.ReportToCWriter.Write(policyReport.Item2);
            }
            finally
            {
                Logger.Instance.WriteMethodExit();
            }
        }
    }
}
